pipeline {
    agent any

    tools {
        maven 'Maven'  // Must match the name in Global Tool Config
    }

    stages {

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Git Checkout') {
            steps {
                git credentialsId: 'Git_Credentials', url: 'https://github.com/shaikrizwan40/springboot-maven-micro'
            }
        }

        stage('Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--format HTML --project "MyProject"',
                                odcInstallation: 'Jenkins-Dependency-check'
            }
        }

        stage('Unit Testing') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Build, Integration Test, Code Coverage') {
            steps {
                sh 'mvn verify'
                jacoco execPattern: '**/target/jacoco.exec',
                       classPattern: '**/target/classes',
                       sourcePattern: '**/src/main/java',
                       exclusionPattern: ''
            }
        }

        stage('Test Reports') {
            steps {
                junit 'target/surefire-reports/*.xml'
                // You can also enable integration test reports if needed:
                // junit 'target/failsafe-reports/*.xml'
            }
        }

        stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                   script(){    
                      def qg = waitForQualityGate()
                      if (qg.status != 'OK') {
                          error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }}
            }
        }
    }
}
